Game Stuff

The game will work like this:

When a player starts a new game, the server picks a random number between 0 and
100.
The player can make a new guess by sending a POST request containing the number
they want to guess.
When the player requests the game path, the server should show some information
about the game including how many guesses have been made, what the most recent
guess was, and whether it was too high, too low, or correct.




The HTTP endpoints to support this game will look like this:

POST to /start_game
This request begins a game. The response says Good luck! and starts a game.

GET to /game
A request to this verb/path combo tells us:

a) how many guesses have been taken.
b) if a guess has been made, it tells what the guess was and whether it was too
high, too low, or correct

POST to /game
This is how we make a guess. The request includes a parameter named guess.
The server stores the guess and sends the user a redirect response, causing the
client to make a GET to /game.
<pre>
Verb: POST
Path: /
Protocol: HTTP/1.1
Host: 127.0.0.1
Port: 9292
Origin: 127.0.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
</pre>


["GET / HTTP/1.1", 0
 "Host: 127.0.0.1:9292",
 "Connection: keep-alive",
 "Cache-Control: no-cache",
 "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36",
 "Postman-Token: 6e1a9a3f-f335-f54e-dd6f-c074ae7d70e5",
 "Accept: */*",
 "Accept-Encoding: gzip, deflate, br",
 "Accept-Language: en-US,en;q=0.9"]


 # headers = ["http/1.1 200 ok",
 #   "date: #{Time.now.strftime('%a, %e %b %Y %H:%M:%S %z')}",
 #   "server: ruby",
 #   "content-type: text/html; charset=iso-8859-1",
 #   "content-length: #{@output.length}\r\n\r\n"].join("\r\n")

 DELETE THIS FILE
